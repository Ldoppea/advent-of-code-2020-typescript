import { countSeaMonstersInFile, countSeaMonstersInImage, getCorners, getImage, getMatching, getMatching2, rotateTileContent, TOP } from "./day20";
import { BOTTOM } from "./day20";
import { readFile } from '../helpers/file-reader';

describe('day 20 part 1', () => {
    it('compute result for sample', () => {
        const daySample = readFile('./data/day20-sample.txt');
        const result = getCorners(daySample); //?.
        expect(result).toEqual(20899048083289);
    })

    it('compute result for input', () => {
        const dayInput = readFile('./data/day20-input.txt');
        const result = getCorners(dayInput); //?.
        expect(result).toEqual(12519494280967);
    })
});

describe('day 20 part 2', () => {   
    it ('rotate tile content 1 time', () => {
        const tileContent = [
            ['.','.','#','#'],
            ['#','#','.','.'],
            ['#','.','.','.'],
        ];
        const result = rotateTileContent(tileContent, 1, false, false); //?

        expect(result).toEqual([
            ['#','#','.'],
            ['.','#','.'],
            ['.','.','#'],
            ['.','.','#'],
        ])
    });

    it ('rotate tile content 2 times', () => {
        const tileContent = [
            ['.','.','#','#'],
            ['#','#','.','.'],
            ['#','.','.','.'],
        ];
        const result = rotateTileContent(tileContent, 2, false, false); //?

        expect(result).toEqual([
            ['.','.','.','#'],
            ['.','.','#','#'],
            ['#','#','.','.'],
        ])
    });

    it ('flip tile content on x and rotate 1 time', () => {
        const tileContent = [
            ['.','.','#','#'],
            ['#','#','.','.'],
            ['#','.','.','.'],
        ];
        const result = rotateTileContent(tileContent, 1, true, false); //?.

        expect(result).toEqual([
            ['.','.','#'],
            ['.','.','#'],
            ['.','#','.'],
            ['#','#','.'],
        ])
    });

    it ('flip tile content on y and rotate 1 time', () => {
        const tileContent = [
            ['.','.','#','#'],
            ['#','#','.','.'],
            ['#','.','.','.'],
        ];
        const result = rotateTileContent(tileContent, 1, false, true); //?.

        expect(result).toEqual([
            ['.','#','#'],
            ['.','#','.'],
            ['#','.','.'],
            ['#','.','.'],
        ])
    });

    it ('flip tile content on x and y and rotate 1 time', () => {
        const tileContent = [
            ['.','.','#','#'],
            ['#','#','.','.'],
            ['#','.','.','.'],
        ];
        const result = rotateTileContent(tileContent, 1, true, true); //?.

        expect(result).toEqual([
            ['#','.','.'],
            ['#','.','.'],
            ['.','#','.'],
            ['.','#','#'],
        ])
    });

    it ('get matching2 tile 1', () => {
        const tile = {
            tileId: 1,
            borders: [],
            tileContent: [
                ['.','.','#','#'],
                ['#','#','.','.'],
                ['#','.','.','.'],
            ]
        };

        const placedTileContent = ['#','.','.','.'];

        const result = getMatching2(tile, placedTileContent, TOP, 0, false, true); //?

        expect(result).toEqual({
            tileId: 1,
            borders: [],
            tileContent: [
                ['#','.','.','.'],
                ['#','#','.','.'],
                ['.','.','#','#'],
            ]
        })
    });

    it ('get matching tile 1', () => {
        const tile = {
            tileId: 1,
            borders: [],
            tileContent: [
                ['.','.','#','#'],
                ['#','#','.','.'],
                ['#','.','.','.'],
            ]
        };

        const placedTile = {
            tileId: 2,
            borders: [],
            tileContent: [
                ['.','.','.','.'],
                ['.','.','.','.'],
                ['#','.','.','.'],
            ]
        };
        const result = getMatching(tile, placedTile, BOTTOM); //?

        expect(result).toEqual({
            tileId: 1,
            borders: [],
            tileContent: [
                ['#','.','.','.'],
                ['#','#','.','.'],
                ['.','.','#','#'],
            ]
        })
    });

    it('get sample image', () => {
        const daySample = readFile('./data/day20-sample.txt');
        const result = getImage(daySample); //?
        expect(result).toEqual([
            ['.','.','.','#','#','#','.','.','.','#','#','.','.','.','#','.','.','.','#','.','.','#','#','#',],
            ['.','#','.','#','#','#','.','.','#','#','.','.','#','#','.','.','#','#','#','#','.','#','#','.',],
            ['#','.','#','#','.','.','#','.','.','#','.','.','.','#','.','.','#','#','#','#','.','.','.','#',],
            ['#','#','#','#','#','.','.','#','#','#','#','#','.','.','.','#','#','#','.','.','.','.','#','#',],
            ['#','.','.','#','#','#','#','.','.','.','#','.','#','.','#','.','#','#','#','.','#','#','#','.',],
            ['.','.','#','.','#','.','.','#','.','.','#','.','#','.','#','.','#','#','#','#','.','#','#','#',],
            ['.','#','#','#','#','.','#','#','#','.','#','.','.','.','#','#','#','.','#','.','.','#','.','#',],
            ['.','#','.','#','.','#','#','#','.','#','#','.','#','#','.','#','.','.','#','.','#','#','.','.',],
            ['#','#','#','.','#','.','.','.','#','.','.','#','.','#','#','.','#','#','#','#','#','#','.','.',],
            ['.','#','.','#','.','.','.','.','#','.','#','#','.','#','.','.','.','#','#','#','.','#','#','.',],
            ['.','.','.','#','.','.','#','.','.','#','.','#','.','#','#','.','.','#','#','#','.','#','#','#',],
            ['#','#','.','.','#','#','.','#','.','.','.','#','.','.','.','#','.','#','.','#','.','#','.','.',],
            ['#','.','#','#','#','#','.','.','.','.','#','#','.','.','#','#','#','#','#','#','#','#','.','#',],
            ['#','#','#','.','#','.','#','.','.','.','#','.','#','#','#','#','#','#','.','#','.','.','#','#',],
            ['#','.','#','#','#','#','.','.','#','.','#','#','#','#','.','#','.','#','.','#','#','#','.','.',],
            ['#','.','.','#','.','#','#','.','.','#','.','.','#','#','#','.','#','.','#','#','.','.','.','.',],
            ['.','#','#','#','#','.','.','.','#','.','.','#','.','.','.','.','.','#','.','.','.','.','.','.',],
            ['.','.','.','.','#','.','.','#','.','.','.','#','#','.','.','#','.','#','.','#','#','#','.','.',],
            ['.','.','.','#','#','#','#','#','#','#','#','.','#','.','.','.','.','#','#','#','#','#','.','#',],
            ['#','#','.','#','.','.','.','.','#','.','#','#','.','#','#','#','#','.','.','.','#','.','#','#',],
            ['#','#','#','.','#','#','#','#','#','.','.','.','#','.','#','#','#','#','#','.','#','.','.','#',],
            ['#','#','.','#','#','.','#','#','#','.','#','.','#','.','.','#','#','#','#','#','#','.','.','.',],
            ['#','#','#','.','.','.','.','#','.','#','.','.','.','.','#','.','.','#','.','.','.','.','.','.',],
            ['.','#','.','#','.','.','#','.','#','#','.','.','.','#','.','#','#','.','.','#','#','#','#','#',],     
        ]);
    })

    it('find 1 monsters', () => {
        const image = [
            '..................#.',
            '#....##....##....###',
            '.#..#..#..#..#..#...',
        ].map(row => row.split(''));

        const result = countSeaMonstersInImage(image); //?.
        
        expect(result).toEqual(1);
    })
    
    it('find 2 monsters', () => {
        const image = [
            '.####...#####..#...###..',
            '#####..#..#.#.####..#.#.',
            '.#.#...#.###...#.##.##..',
            '#.#.##.###.#.##.##.#####',
            '..##.###.####..#.####.##',
            '...#.#..##.##...#..#..##',
            '#.##.#..#.#..#..##.#.#..',
            '.###.##.....#...###.#...',
            '#.####.#.#....##.#..#.#.',
            '##...#..#....#..#...####',
            '..#.##...###..#.#####..#',
            '....#.##.#.#####....#...',
            '..##.##.###.....#.##..#.',
            '#...#...###..####....##.',
            '.#.##...#.##.#.#.###...#',
            '#.###.#..####...##..#...',
            '#.###...#.##...#.######.',
            '.###.###.#######..#####.',
            '..##.#..#..#.#######.###',
            '#.#..##.########..#..##.',
            '#.#####..#.#...##..#....',
            '#....##..#.#########..##',
            '#...#.....#..##...###.##',
            '#..###....##.#...##.##.#'
        ].map(row => row.split(''));

        

        const result = countSeaMonstersInImage(image); //?.
        
        expect(result).toEqual(2);
    })

    it('compute result for sample', () => {
        const daySample = readFile('./data/day20-sample.txt');
        const result = countSeaMonstersInFile(daySample); //?.
        expect(result).toEqual(273);
    })

    it('compute result for input', () => {
        const dayInput = readFile('./data/day20-input.txt');
        const result = countSeaMonstersInFile(dayInput); //?.
        expect(result).toEqual(2442);
    })
});

